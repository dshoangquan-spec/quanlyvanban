import streamlit as st
import pandas as pd
import tempfile
import os
from upload_to_dropbox import upload_file_to_dropbox  # tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n Dropbox
from upload_to_dropbox import download_bytes_from_dropbox

# Thi·∫øt l·∫≠p giao di·ªán
st.set_page_config(page_title="Qu·∫£n l√Ω VƒÉn b·∫£n", layout="wide")
st.title("üìö Qu·∫£n l√Ω VƒÉn b·∫£n - Dropbox")

with st.form("form_vanban"):
    so_van_ban = st.text_input("S·ªë vƒÉn b·∫£n")
    tieu_de = st.text_input("Ti√™u ƒë·ªÅ")
    co_quan = st.text_input("C∆° quan ban h√†nh")
    linh_vuc = st.text_input("Lƒ©nh v·ª±c")
    file_upload = st.file_uploader("ƒê√≠nh k√®m file (PDF, DOCX)", type=["pdf", "docx"])

    submitted = st.form_submit_button("L∆∞u vƒÉn b·∫£n")

    if submitted:
        dropbox_path = None

        if file_upload:
            # L∆∞u t·∫°m file r·ªìi upload
            suffix = os.path.splitext(file_upload.name)[1]
            with tempfile.NamedTemporaryFile(delete=False, suffix=suffix) as tmp:
                tmp.write(file_upload.read())
                tmp_path = tmp.name
            try:
                # ‚úÖ Upload v√†o th∆∞ m·ª•c c·ªë ƒë·ªãnh (ƒë·∫∑t trong upload_to_dropbox.py)
                dropbox_path = upload_file_to_dropbox(tmp_path, file_upload.name)
            except Exception as e:
                st.error(f"L·ªói upload: {e}")
            finally:
                os.remove(tmp_path)

        # Ghi v√†o CSV
        row = {
            "S·ªë vƒÉn b·∫£n": so_van_ban,
            "Ti√™u ƒë·ªÅ": tieu_de,
            "C∆° quan": co_quan,
            "Lƒ©nh v·ª±c": linh_vuc,
            "File Dropbox": dropbox_path if dropbox_path else "Kh√¥ng c√≥"
        }

        if not os.path.exists("vanban.csv"):
            pd.DataFrame([row]).to_csv("vanban.csv", index=False, encoding="utf-8-sig")
        else:
            pd.DataFrame([row]).to_csv("vanban.csv", mode="a", header=False, index=False, encoding="utf-8-sig")

        if dropbox_path:
            st.success("‚úÖ VƒÉn b·∫£n ƒë√£ ƒë∆∞·ª£c l∆∞u v√† upload l√™n Dropbox!")
            st.code(dropbox_path)
        else:
            st.warning("ƒê√£ l∆∞u th√¥ng tin nh∆∞ng ch∆∞a c√≥ file Dropbox.")

# Hi·ªÉn th·ªã danh s√°ch ƒë√£ l∆∞u
def _clean_path(val: str) -> str:
    if not isinstance(val, str):
        return ""
    return val.replace("‚úÖ ƒê√£ upload th√†nh c√¥ng t·ªõi:", "").strip()

def _norm(s: str) -> str:
    """Chu·∫©n h√≥a ƒë·ªÉ t√¨m ki·∫øm: b·ªè d·∫•u, lower, strip."""
    s = str(s or "")
    s = unicodedata.normalize("NFD", s)
    s = "".join(ch for ch in s if unicodedata.category(ch) != "Mn")
    return s.lower().strip()

st.subheader("üìÑ Danh s√°ch VƒÉn b·∫£n ƒë√£ l∆∞u")
if os.path.exists("vanban.csv"):
    # ƒê·ªçc CSV an to√†n, kh√¥ng sinh NaN
    df = pd.read_csv("vanban.csv", keep_default_na=False)

    # Chu·∫©n h√≥a c·ªôt ƒë∆∞·ªùng d·∫´n
    if "File Dropbox" in df.columns:
        df["File Dropbox"] = df["File Dropbox"].apply(_clean_path)

    # ---------- Khu v·ª±c T√åM KI·∫æM & B·ªò L·ªåC ----------
    st.markdown("### üîé T√¨m ki·∫øm & b·ªô l·ªçc")

    # H√†ng 1: √¥ t·ª´ kh√≥a
    q = st.text_input("T·ª´ kh√≥a", placeholder="Nh·∫≠p s·ªë vƒÉn b·∫£n, ti√™u ƒë·ªÅ, c∆° quan, lƒ©nh v·ª±c, t√™n file...")

    # H√†ng 2: filter theo danh m·ª•c
    c1, c2, c3, c4 = st.columns([1, 1, 1, 1])
    sel_coquan  = c1.multiselect("C∆° quan", sorted([x for x in df.get("C∆° quan", "").unique() if str(x).strip()]))
    sel_linhvuc = c2.multiselect("Lƒ©nh v·ª±c", sorted([x for x in df.get("Lƒ©nh v·ª±c", "").unique() if str(x).strip()]))

    # L·ªçc theo ƒëu√¥i file (pdf/docx)
    all_ext = ["pdf", "docx"]
    sel_ext = c3.multiselect("ƒê·ªãnh d·∫°ng file", all_ext)

    # N√∫t x√≥a/clear filter
    if c4.button("üîÑ X√≥a b·ªô l·ªçc"):
        st.experimental_rerun()

    # T·∫°o c·ªôt t·ªïng h·ª£p ƒë·ªÉ t√¨m ki·∫øm to√†n vƒÉn
    cols_to_join = [df.get("S·ªë vƒÉn b·∫£n", ""), df.get("Ti√™u ƒë·ªÅ", ""), df.get("C∆° quan", ""),
                    df.get("Lƒ©nh v·ª±c", ""), df.get("File Dropbox", "")]
    df["_norm_row"] = (cols_to_join[0].astype(str) + " " +
                       cols_to_join[1].astype(str) + " " +
                       cols_to_join[2].astype(str) + " " +
                       cols_to_join[3].astype(str) + " " +
                       cols_to_join[4].astype(str)).map(_norm)

    # √Åp d·ª•ng t√¨m ki·∫øm + l·ªçc
    filtered = df.copy()

    if q:
        nq = _norm(q)
        filtered = filtered[filtered["_norm_row"].str.contains(nq, na=False)]

    if sel_coquan:
        filtered = filtered[filtered.get("C∆° quan", "").isin(sel_coquan)]

    if sel_linhvuc:
        filtered = filtered[filtered.get("Lƒ©nh v·ª±c", "").isin(sel_linhvuc)]

    if sel_ext:
        filtered = filtered[filtered["File Dropbox"].str.lower().str.endswith(tuple(sel_ext))]

    # B·ªè c·ªôt ph·ª•
    if "_norm_row" in filtered.columns:
        filtered = filtered.drop(columns=["_norm_row"])

    # ---------- B·∫¢NG + n√∫t T·∫£i / X√≥a tr√™n c√πng m·ªôt h√†ng ----------
    # Header
    h = st.columns([0.4, 1.1, 1.8, 1.2, 1.2, 1.8, 0.8, 0.8])
    h[0].markdown("**#**")
    h[1].markdown("**S·ªë vƒÉn b·∫£n**")
    h[2].markdown("**Ti√™u ƒë·ªÅ**")
    h[3].markdown("**C∆° quan**")
    h[4].markdown("**Lƒ©nh v·ª±c**")
    h[5].markdown("**File Dropbox**")
    h[6].markdown("**T·∫£i**")
    h[7].markdown("**X√≥a**")

    for idx, row in filtered.reset_index(drop=True).iterrows():
        dropbox_path = _clean_path(row.get("File Dropbox", ""))
        file_name = os.path.basename(dropbox_path) if dropbox_path.startswith("/") else ""

        cols = st.columns([0.4, 1.1, 1.8, 1.2, 1.2, 1.8, 0.8, 0.8])
        cols[0].write(f"**{idx+1}**")
        cols[1].write(row.get("S·ªë vƒÉn b·∫£n", ""))
        cols[2].write(row.get("Ti√™u ƒë·ªÅ", ""))
        cols[3].write(row.get("C∆° quan", ""))
        cols[4].write(row.get("Lƒ©nh v·ª±c", ""))
        cols[5].write(file_name or "-")

        if dropbox_path and dropbox_path.startswith("/"):
            # N√∫t t·∫£i
            try:
                file_bytes = download_bytes_from_dropbox(dropbox_path)
                cols[6].download_button(
                    label="‚¨áÔ∏è T·∫£i",
                    data=file_bytes,
                    file_name=file_name or "file",
                    mime="application/octet-stream",
                    key=f"dl_{dropbox_path}",
                )
            except Exception:
                cols[6].warning("Kh√¥ng t·∫£i ƒë∆∞·ª£c")

            # N√∫t x√≥a
            if cols[7].button("üóë X√≥a", key=f"del_{dropbox_path}"):
                try:
                    delete_file_from_dropbox(dropbox_path)   # X√≥a Dropbox
                except Exception as e:
                    st.error(f"L·ªói x√≥a tr√™n Dropbox: {e}")
                # X√≥a kh·ªèi CSV theo ƒë√∫ng ch·ªâ m·ª•c g·ªëc trong file
                # -> d√πng mask ƒë·ªÉ t√¨m h√†ng kh·ªõp path
                full_df = pd.read_csv("vanban.csv", keep_default_na=False)
                full_df["File Dropbox"] = full_df["File Dropbox"].apply(_clean_path)
                full_df = full_df[full_df["File Dropbox"] != dropbox_path]
                full_df.to_csv("vanban.csv", index=False, encoding="utf-8-sig")
                st.success(f"ƒê√£ x√≥a: {file_name}")
                st.rerun()
        else:
            cols[6].write("-")
            cols[7].write("-")
else:
    st.info("Ch∆∞a c√≥ vƒÉn b·∫£n n√†o ƒë∆∞·ª£c l∆∞u.")
