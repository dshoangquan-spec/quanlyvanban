# quanlyvanban.py
import os
import io
import unicodedata
import tempfile
from datetime import date, datetime

import pandas as pd
import streamlit as st

from upload_to_dropbox import (
    upload_file_to_dropbox,
    download_bytes_from_dropbox,
    delete_file_from_dropbox,
)

# ================= UI & CSS =================
st.set_page_config(page_title="Qu·∫£n l√Ω VƒÉn b·∫£n", layout="wide")

st.markdown("""
<style>
.block-container {padding-top: 0.8rem; padding-bottom: 2rem;}
.stTextInput>div>div>input, .stMultiSelect div[data-baseweb="select"], .stDateInput input { min-height: 42px; }
.stButton>button { padding: 0.38rem 0.9rem; border-radius: 8px; font-size: 0.92rem; }
.btn-cell .stButton>button { padding: 0.25rem 0.55rem; font-size: 0.85rem; }
.badge { background:#eef3ff; color:#2c3e50; padding:2px 8px; border-radius:999px; font-size:.8rem; }
hr { margin: 0.6rem 0; }
</style>
""", unsafe_allow_html=True)

st.title("üìö Qu·∫£n l√Ω VƒÉn b·∫£n - Dropbox")

CSV_FILE = "vanban.csv"

# ================= Helpers =================
def _clean_path(val: str) -> str:
    """Lo·∫°i b·ªè ti·ªÅn t·ªë hi·ªÉn th·ªã n·∫øu t·ªìn t·∫°i."""
    if not isinstance(val, str):
        return ""
    return val.replace("‚úÖ ƒê√£ upload th√†nh c√¥ng t·ªõi:", "").strip()

def _norm(s: str) -> str:
    """Chu·∫©n ho√° ti·∫øng Vi·ªát ƒë·ªÉ t√¨m ki·∫øm: b·ªè d·∫•u, to lower, trim."""
    s = "" if s is None else str(s)
    s = unicodedata.normalize("NFD", s)
    s = "".join(ch for ch in s if unicodedata.category(ch) != "Mn")
    return s.lower().strip()

def _excel_bytes_from_df(df: pd.DataFrame) -> bytes:
    """Xu·∫•t DataFrame -> XLSX, ∆∞u ti√™n openpyxl; fallback xlsxwriter."""
    buf = io.BytesIO()
    # openpyxl
    try:
        with pd.ExcelWriter(buf, engine="openpyxl") as w:
            df.to_excel(w, index=False, sheet_name="DanhSach")
        buf.seek(0)
        return buf.read()
    except Exception:
        pass
    # xlsxwriter
    try:
        with pd.ExcelWriter(buf, engine="xlsxwriter") as w:
            df.to_excel(w, index=False, sheet_name="DanhSach")
            ws = w.sheets["DanhSach"]
            for i, col in enumerate(df.columns):
                width = min(40, max(12, int(df[col].astype(str).map(len).max() * 1.1)))
                ws.set_column(i, i, width)
        buf.seek(0)
        return buf.read()
    except Exception as e_xlsx:
        raise RuntimeError(
            "Ch∆∞a c√†i th∆∞ vi·ªán t·∫°o Excel. H√£y th√™m `openpyxl` (khuy√™n d√πng) "
            "ho·∫∑c `xlsxwriter` v√†o requirements.txt / pip install."
        ) from e_xlsx

def _read_csv() -> pd.DataFrame:
    if not os.path.exists(CSV_FILE):
        return pd.DataFrame(columns=[
            "S·ªë vƒÉn b·∫£n", "Ti√™u ƒë·ªÅ", "C∆° quan", "Lƒ©nh v·ª±c", "Ng√†y ban h√†nh", "File Dropbox"
        ])
    df = pd.read_csv(CSV_FILE, keep_default_na=False)
    # b·∫£o ƒë·∫£m ƒë·ªß c·ªôt
    for c in ["S·ªë vƒÉn b·∫£n", "Ti√™u ƒë·ªÅ", "C∆° quan", "Lƒ©nh v·ª±c", "Ng√†y ban h√†nh", "File Dropbox"]:
        if c not in df.columns:
            df[c] = ""
    df["File Dropbox"] = df["File Dropbox"].apply(_clean_path)
    return df

def _write_row(row: dict):
    if not os.path.exists(CSV_FILE):
        pd.DataFrame([row]).to_csv(CSV_FILE, index=False, encoding="utf-8-sig")
    else:
        pd.DataFrame([row]).to_csv(CSV_FILE, mode="a", header=False, index=False, encoding="utf-8-sig")

# ================= Form nh·∫≠p =================
with st.form("form_vanban", clear_on_submit=False):
    cL, cR = st.columns([2, 1])

    with cL:
        so_van_ban = st.text_input("S·ªë vƒÉn b·∫£n")
        tieu_de     = st.text_input("Ti√™u ƒë·ªÅ")
        co_quan     = st.text_input("C∆° quan ban h√†nh")
        linh_vuc    = st.text_input("Lƒ©nh v·ª±c")
        ngay_bh     = st.date_input("Ng√†y ban h√†nh", value=date.today(), format="DD/MM/YYYY")

    with cR:
        st.markdown("**ƒê√≠nh k√®m (PDF/DOCX)**")
        file_upload = st.file_uploader("", type=["pdf", "docx"])
        st.caption("üí° K√©o‚Äìth·∫£ file v√†o ƒë√¢y. Dung l∆∞·ª£ng ‚â§ 200MB / t·ªáp.")

    submitted = st.form_submit_button("üíæ L∆∞u vƒÉn b·∫£n", type="primary")

    if submitted:
        dropbox_path = ""
        if file_upload:
            suffix = os.path.splitext(file_upload.name)[1]
            with tempfile.NamedTemporaryFile(delete=False, suffix=suffix) as tmp:
                tmp.write(file_upload.read())
                tmp_path = tmp.name
            try:
                dropbox_path = upload_file_to_dropbox(tmp_path, file_upload.name)
                st.toast("‚úÖ Upload th√†nh c√¥ng!", icon="‚úÖ")
            except Exception as e:
                st.error(f"L·ªói upload: {e}")
            finally:
                os.remove(tmp_path)

        # L∆∞u ng√†y theo ƒë·ªãnh d·∫°ng Vi·ªát Nam dd/mm/yyyy
        ngay_bh_str = ngay_bh.strftime("%d/%m/%Y")

        row = {
            "S·ªë vƒÉn b·∫£n"   : so_van_ban.strip(),
            "Ti√™u ƒë·ªÅ"      : tieu_de.strip(),
            "C∆° quan"      : co_quan.strip(),
            "Lƒ©nh v·ª±c"     : linh_vuc.strip(),
            "Ng√†y ban h√†nh": ngay_bh_str,
            "File Dropbox" : dropbox_path if dropbox_path else "Kh√¥ng c√≥",
        }
        _write_row(row)

        if dropbox_path:
            st.success("‚úÖ VƒÉn b·∫£n ƒë√£ ƒë∆∞·ª£c l∆∞u.")
        else:
            st.warning("ƒê√£ l∆∞u th√¥ng tin, nh∆∞ng ch∆∞a c√≥ file Dropbox.")

# ================= Danh s√°ch & T√¨m ki·∫øm =================
st.subheader("üóÇÔ∏è Danh s√°ch VƒÉn b·∫£n ƒë√£ l∆∞u")
df = _read_csv()

if len(df) == 0:
    st.info("Ch∆∞a c√≥ vƒÉn b·∫£n n√†o ƒë∆∞·ª£c l∆∞u.")
    st.stop()

# Chuy·ªÉn c·ªôt ng√†y sang datetime ƒë·ªÉ l·ªçc (dayfirst=True v√¨ dd/mm/yyyy)
df["_ngay_dt"] = pd.to_datetime(df["Ng√†y ban h√†nh"], format="%d/%m/%Y", errors="coerce", dayfirst=True)

with st.expander("üîé T√¨m ki·∫øm & b·ªô l·ªçc", expanded=True):
    q = st.text_input("T·ª´ kh√≥a", placeholder="Nh·∫≠p s·ªë vƒÉn b·∫£n, ti√™u ƒë·ªÅ, c∆° quan, lƒ©nh v·ª±c, t√™n file...")

    c1, c2, c3, c4, c5 = st.columns([1.1, 1.1, 1.1, 1.4, 0.8])
    sel_coquan  = c1.multiselect("C∆° quan", sorted([x for x in df["C∆° quan"].unique() if str(x).strip()]))
    sel_linhvuc = c2.multiselect("Lƒ©nh v·ª±c", sorted([x for x in df["Lƒ©nh v·ª±c"].unique() if str(x).strip()]))
    sel_ext     = c3.multiselect("ƒê·ªãnh d·∫°ng file", ["pdf", "docx"])

    # Kho·∫£ng ng√†y ban h√†nh (dd/mm/yyyy)
    min_date = pd.to_datetime(df["_ngay_dt"]).min()
    max_date = pd.to_datetime(df["_ngay_dt"]).max()
    if pd.isna(min_date) or pd.isna(max_date):
        min_date, max_date = date.today(), date.today()

    start_end = c4.date_input("T·ª´ / ƒê·∫øn (ng√†y BH)", value=(min_date.date(), max_date.date()), format="DD/MM/YYYY")
    page_size = c5.selectbox("M·ªói trang", [10, 20, 50, 100], index=0)

    export_btn = st.button("‚¨áÔ∏è Xu·∫•t Excel (k·∫øt qu·∫£ l·ªçc)")

# T·∫°o c·ªôt b√¨nh th∆∞·ªùng h√≥a cho t√¨m ki·∫øm nhanh
cols_join = [
    df["S·ªë vƒÉn b·∫£n"].astype(str),
    df["Ti√™u ƒë·ªÅ"].astype(str),
    df["C∆° quan"].astype(str),
    df["Lƒ©nh v·ª±c"].astype(str),
    df["File Dropbox"].astype(str),
]
df["_norm_row"] = (cols_join[0] + " " + cols_join[1] + " " + cols_join[2] + " " + cols_join[3] + " " + cols_join[4]).map(_norm)

# √Åp filter
filtered = df.copy()

if q:
    nq = _norm(q)
    filtered = filtered[filtered["_norm_row"].str.contains(nq, na=False)]

if sel_coquan:
    filtered = filtered[filtered["C∆° quan"].isin(sel_coquan)]
if sel_linhvuc:
    filtered = filtered[filtered["Lƒ©nh v·ª±c"].isin(sel_linhvuc)]
if sel_ext:
    filtered = filtered[filtered["File Dropbox"].str.lower().str.endswith(tuple(sel_ext))]

# L·ªçc ng√†y: start_end l√† tuple 2 ng√†y
if isinstance(start_end, (list, tuple)) and len(start_end) == 2:
    start_date, end_date = start_end
    start_dt = datetime.combine(start_date, datetime.min.time())
    end_dt   = datetime.combine(end_date,   datetime.max.time())
    filtered = filtered[(filtered["_ngay_dt"] >= pd.Timestamp(start_dt)) & (filtered["_ngay_dt"] <= pd.Timestamp(end_dt))]

# B·ªè c·ªôt n·ªôi b·ªô
filtered = filtered.drop(columns=[c for c in ["_norm_row", "_ngay_dt"] if c in filtered.columns])

# Xu·∫•t Excel theo k·∫øt qu·∫£ l·ªçc
if export_btn:
    xlsx_data = _excel_bytes_from_df(filtered)
    st.download_button("‚¨áÔ∏è T·∫£i Excel", data=xlsx_data, file_name="vanban_loc.xlsx",
                       mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

# =============== Ph√¢n trang & Render b·∫£ng c√≥ n√∫t t·∫£i/x√≥a ===============
total = len(filtered)
if total == 0:
    st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p.")
    st.stop()

pages = (total + page_size - 1) // page_size
pg_col1, pg_col2 = st.columns([1, 6])
page = pg_col1.number_input("Trang", min_value=1, max_value=max(pages, 1), value=1, step=1)
pg_col2.markdown(f"<span class='badge'>T·ªïng: {total} d√≤ng ‚Ä¢ {pages} trang</span>", unsafe_allow_html=True)

start = (page - 1) * page_size
end   = start + page_size
show  = filtered.iloc[start:end].reset_index(drop=True)

# Header
H = st.columns([0.35, 1.0, 1.8, 1.2, 1.1, 1.0, 1.6, 0.7, 0.7])
H[0].markdown("**#**")
H[1].markdown("**S·ªë vƒÉn b·∫£n**")
H[2].markdown("**Ti√™u ƒë·ªÅ**")
H[3].markdown("**C∆° quan**")
H[4].markdown("**Lƒ©nh v·ª±c**")
H[5].markdown("**Ng√†y ban h√†nh**")
H[6].markdown("**File**")
H[7].markdown("**‚¨áÔ∏è T·∫£i**")
H[8].markdown("**üóë X√≥a**")

for idx, row in show.iterrows():
    dropbox_path = _clean_path(row.get("File Dropbox", ""))
    file_name    = os.path.basename(dropbox_path) if dropbox_path.startswith("/") else ""

    c = st.columns([0.35, 1.0, 1.8, 1.2, 1.1, 1.0, 1.6, 0.7, 0.7])
    c[0].write(f"**{start+idx+1}**")
    c[1].write(row.get("S·ªë vƒÉn b·∫£n", ""))
    c[2].write(row.get("Ti√™u ƒë·ªÅ", ""))
    c[3].write(row.get("C∆° quan", ""))
    c[4].write(row.get("Lƒ©nh v·ª±c", ""))
    c[5].write(row.get("Ng√†y ban h√†nh", ""))
    c[6].write(file_name or "-")

    # ‚¨áÔ∏è T·∫£i
    with c[7].container():
        st.markdown('<div class="btn-cell">', unsafe_allow_html=True)
        if dropbox_path and dropbox_path.startswith("/"):
            try:
                file_bytes = download_bytes_from_dropbox(dropbox_path)
                st.download_button("‚¨áÔ∏è", data=file_bytes, file_name=file_name or "file",
                                   mime="application/octet-stream", key=f"dl_{dropbox_path}")
            except Exception:
                st.button("‚ö†Ô∏è", key=f"warn_{dropbox_path}", disabled=True)
        else:
            st.button("‚Äî", key=f"dl_dis_{idx}", disabled=True)
        st.markdown("</div>", unsafe_allow_html=True)

    # üóë X√≥a
    with c[8].container():
        st.markdown('<div class="btn-cell">', unsafe_allow_html=True)
        if dropbox_path and st.button("üóë", key=f"del_{dropbox_path}"):
            try:
                delete_file_from_dropbox(dropbox_path)
            except Exception as e:
                st.error(f"L·ªói x√≥a Dropbox: {e}")

            # X√≥a kh·ªèi CSV
            all_df = _read_csv()
            all_df = all_df[all_df["File Dropbox"].apply(_clean_path) != dropbox_path]
            all_df.to_csv(CSV_FILE, index=False, encoding="utf-8-sig")
            st.success(f"ƒê√£ x√≥a: {file_name}")
            st.rerun()
        st.markdown("</div>", unsafe_allow_html=True)
